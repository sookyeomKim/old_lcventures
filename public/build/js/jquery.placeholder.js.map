{"version":3,"sources":["jquery.placeholder.js","setPlaceholder.js"],"names":[],"mappingszRA;AACA;AACA;AACA;AACA;AACA","file":"jquery.placeholder.js","sourcesContent":["/*!\n * jQuery Placeholder Plugin v2.3.1\n * https://github.com/mathiasbynens/jquery-placeholder\n *\n * Copyright 2011, 2015 Mathias Bynens\n * Released under the MIT license\n */\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        factory(require('jquery'));\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function($) {\n\n    /****\n     * Allows plugin behavior simulation in modern browsers for easier debugging. \n     * When setting to true, use attribute \"placeholder-x\" rather than the usual \"placeholder\" in your inputs/textareas \n     * i.e. <input type=\"text\" placeholder-x=\"my placeholder text\" />\n     */\n    var debugMode = false; \n\n    // Opera Mini v7 doesn't support placeholder although its DOM seems to indicate so\n    var isOperaMini = Object.prototype.toString.call(window.operamini) === '[object OperaMini]';\n    var isInputSupported = 'placeholder' in document.createElement('input') && !isOperaMini && !debugMode;\n    var isTextareaSupported = 'placeholder' in document.createElement('textarea') && !isOperaMini && !debugMode;\n    var valHooks = $.valHooks;\n    var propHooks = $.propHooks;\n    var hooks;\n    var placeholder;\n    var settings = {};\n\n    if (isInputSupported && isTextareaSupported) {\n\n        placeholder = $.fn.placeholder = function() {\n            return this;\n        };\n\n        placeholder.input = true;\n        placeholder.textarea = true;\n\n    } else {\n\n        placeholder = $.fn.placeholder = function(options) {\n\n            var defaults = {customClass: 'placeholder'};\n            settings = $.extend({}, defaults, options);\n\n            return this.filter((isInputSupported ? 'textarea' : ':input') + '[' + (debugMode ? 'placeholder-x' : 'placeholder') + ']')\n                .not('.'+settings.customClass)\n                .not(':radio, :checkbox, [type=hidden]')\n                .bind({\n                    'focus.placeholder': clearPlaceholder,\n                    'blur.placeholder': setPlaceholder\n                })\n                .data('placeholder-enabled', true)\n                .trigger('blur.placeholder');\n        };\n\n        placeholder.input = isInputSupported;\n        placeholder.textarea = isTextareaSupported;\n\n        hooks = {\n            'get': function(element) {\n\n                var $element = $(element);\n                var $passwordInput = $element.data('placeholder-password');\n\n                if ($passwordInput) {\n                    return $passwordInput[0].value;\n                }\n\n                return $element.data('placeholder-enabled') && $element.hasClass(settings.customClass) ? '' : element.value;\n            },\n            'set': function(element, value) {\n\n                var $element = $(element);\n                var $replacement;\n                var $passwordInput;\n\n                if (value !== '') {\n\n                    $replacement = $element.data('placeholder-textinput');\n                    $passwordInput = $element.data('placeholder-password');\n\n                    if ($replacement) {\n                        clearPlaceholder.call($replacement[0], true, value) || (element.value = value);\n                        $replacement[0].value = value;\n\n                    } else if ($passwordInput) {\n                        clearPlaceholder.call(element, true, value) || ($passwordInput[0].value = value);\n                        element.value = value;\n                    }\n                }\n\n                if (!$element.data('placeholder-enabled')) {\n                    element.value = value;\n                    return $element;\n                }\n\n                if (value === '') {\n                    \n                    element.value = value;\n                    \n                    // Setting the placeholder causes problems if the element continues to have focus.\n                    if (element != safeActiveElement()) {\n                        // We can't use `triggerHandler` here because of dummy text/password inputs :(\n                        setPlaceholder.call(element);\n                    }\n\n                } else {\n                    \n                    if ($element.hasClass(settings.customClass)) {\n                        clearPlaceholder.call(element);\n                    }\n\n                    element.value = value;\n                }\n                // `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363\n                return $element;\n            }\n        };\n\n        if (!isInputSupported) {\n            valHooks.input = hooks;\n            propHooks.value = hooks;\n        }\n\n        if (!isTextareaSupported) {\n            valHooks.textarea = hooks;\n            propHooks.value = hooks;\n        }\n\n        $(function() {\n            // Look for forms\n            $(document).delegate('form', 'submit.placeholder', function() {\n                \n                // Clear the placeholder values so they don't get submitted\n                var $inputs = $('.'+settings.customClass, this).each(function() {\n                    clearPlaceholder.call(this, true, '');\n                });\n\n                setTimeout(function() {\n                    $inputs.each(setPlaceholder);\n                }, 10);\n            });\n        });\n\n        // Clear placeholder values upon page reload\n        $(window).bind('beforeunload.placeholder', function() {\n\n            var clearPlaceholders = true;\n\n            try {\n                // Prevent IE javascript:void(0) anchors from causing cleared values\n                if (document.activeElement.toString() === 'javascript:void(0)') {\n                    clearPlaceholders = false;\n                }\n            } catch (exception) { }\n\n            if (clearPlaceholders) {\n                $('.'+settings.customClass).each(function() {\n                    this.value = '';\n                });\n            }\n        });\n    }\n\n    function args(elem) {\n        // Return an object of element attributes\n        var newAttrs = {};\n        var rinlinejQuery = /^jQuery\\d+$/;\n\n        $.each(elem.attributes, function(i, attr) {\n            if (attr.specified && !rinlinejQuery.test(attr.name)) {\n                newAttrs[attr.name] = attr.value;\n            }\n        });\n\n        return newAttrs;\n    }\n\n    function clearPlaceholder(event, value) {\n        \n        var input = this;\n        var $input = $(this);\n        \n        if (input.value === $input.attr((debugMode ? 'placeholder-x' : 'placeholder')) && $input.hasClass(settings.customClass)) {\n            \n            input.value = '';\n            $input.removeClass(settings.customClass);\n\n            if ($input.data('placeholder-password')) {\n\n                $input = $input.hide().nextAll('input[type=\"password\"]:first').show().attr('id', $input.removeAttr('id').data('placeholder-id'));\n                \n                // If `clearPlaceholder` was called from `$.valHooks.input.set`\n                if (event === true) {\n                    $input[0].value = value;\n\n                    return value;\n                }\n\n                $input.focus();\n\n            } else {\n                input == safeActiveElement() && input.select();\n            }\n        }\n    }\n\n    function setPlaceholder(event) {\n        var $replacement;\n        var input = this;\n        var $input = $(this);\n        var id = input.id;\n\n        // If the placeholder is activated, triggering blur event (`$input.trigger('blur')`) should do nothing.\n        if (event && event.type === 'blur' && $input.hasClass(settings.customClass)) {\n            return;\n        }\n\n        if (input.value === '') {\n            if (input.type === 'password') {\n                if (!$input.data('placeholder-textinput')) {\n                    \n                    try {\n                        $replacement = $input.clone().prop({ 'type': 'text' });\n                    } catch(e) {\n                        $replacement = $('<input>').attr($.extend(args(this), { 'type': 'text' }));\n                    }\n\n                    $replacement\n                        .removeAttr('name')\n                        .data({\n                            'placeholder-enabled': true,\n                            'placeholder-password': $input,\n                            'placeholder-id': id\n                        })\n                        .bind('focus.placeholder', clearPlaceholder);\n\n                    $input\n                        .data({\n                            'placeholder-textinput': $replacement,\n                            'placeholder-id': id\n                        })\n                        .before($replacement);\n                }\n\n                input.value = '';\n                $input = $input.removeAttr('id').hide().prevAll('input[type=\"text\"]:first').attr('id', $input.data('placeholder-id')).show();\n\n            } else {\n                \n                var $passwordInput = $input.data('placeholder-password');\n\n                if ($passwordInput) {\n                    $passwordInput[0].value = '';\n                    $input.attr('id', $input.data('placeholder-id')).show().nextAll('input[type=\"password\"]:last').hide().removeAttr('id');\n                }\n            }\n\n            $input.addClass(settings.customClass);\n            $input[0].value = $input.attr((debugMode ? 'placeholder-x' : 'placeholder'));\n\n        } else {\n            $input.removeClass(settings.customClass);\n        }\n    }\n\n    function safeActiveElement() {\n        // Avoid IE9 `document.activeElement` of death\n        try {\n            return document.activeElement;\n        } catch (exception) {}\n    }\n}));\n","/**\r\n * Created by ikks0 on 2016-12-29.\r\n */\r\n(function ($) {\r\n    $('input').placeholder();\r\n})(jQuery);"]}